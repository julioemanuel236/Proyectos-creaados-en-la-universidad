package App;

import javax.swing.*;
import javax.swing.border.LineBorder;

import algoritmos.*;

import java.util.PriorityQueue;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Comparator;

public class Ventana extends JFrame{

	PriorityQueue<Proceso> procesos = new PriorityQueue<>(new Comparator() {

		@Override
		public int compare(Object o1, Object o2) {
			Proceso p1 = (Proceso)o1;
			Proceso p2 = (Proceso)o2;
			if(p1.getInicio()<p2.getInicio())return -1;
			else if(p1.getInicio()>p2.getInicio())return 1;
			else if(p1.getId()<p2.getId())return -1;
			else if(p1.getId()>p2.getId())return 1;
			return 0;
		}
		
	});
	
	ScrollPanel zone;
	ScrollPanel table;
	AlgoritmoPlanificacion algoritmo;
	ArrayList<JTextField[]> entrys = new ArrayList<>();
	JLabel 	   etiquetas[] = new JLabel[4];
	
	Ventana(){
		setLayout(null);
		setResizable(false);
		setSize(900,500);		
		iniTable();		
		iniButtons();
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		JPanel p = new JPanel();
		p.setSize(getSize());
		p.setBackground(Color.DARK_GRAY);
		add(p);
		setVisible(true);
		run();
	}
	
	private void iniButtons() {	
		JComboBox<String> jcb = new JComboBox<>();
		jcb.setLocation(table.getWidth()+table.getX(),5);
		jcb.setSize(getWidth()-jcb.getX()-15,50);
		
		jcb.requestFocus();
		jcb.addItem("Prioridad Apropiativo");		
		jcb.addItem("Round Robin");		
		jcb.addItem("SJF");
		add(jcb);
		
		jcb.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				int size;
				if(jcb.getSelectedIndex() == 0)
					size = etiquetas.length;									
				else size = etiquetas.length-1;
				for(int i=0;i<size;i++) {												
					JLabel jl = etiquetas[i];
					jl.setSize(table.getWidth()/size,20);			
//					System.out.println(jl.getSize());
					jl.setLocation(0+(i*jl.getWidth()),0);
					jl.setHorizontalAlignment(JLabel.CENTER);
					jl.setForeground(Color.white);		
					jl.setVisible(true);
				}
				for(int i=0;i<entrys.size();i++) {
					JTextField entry[] = entrys.get(i);
					for(int j=0;j<size;j++) {
						JTextField jt = entry[j];						
						jt.setSize(etiquetas[j].getSize());
						jt.setLocation(etiquetas[j].getX(),i*jt.getHeight());
						repaint();
						System.out.println(jt.getSize());
						System.out.println(jt.getLocation());
						jl.setVisible(true);
					}
				}
				
				for(int i=size;i<etiquetas.length;i++)
					etiquetas[i].setVisible(false);
				for(int i=0;i<entrys.size();i++) {
					JTextField entry[] = entrys.get(i);
					for(int j=size;j<entry.length;j++) {
						JTextField jt = entry[j];
						jt.setVisible(etiquetas[j].isVisible());
					}
				}
				
			}
		});
		
		JButton ejecutar = new JButton("Ejecutar Simluacion");
		ejecutar.setSize(jcb.getWidth(),50);
		ejecutar.setLocation(jcb.getX(),jcb.getHeight()+jcb.getY()+5);
		add(ejecutar);
		
		ejecutar.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				try {
					
				}
				catch(Exception ee) {
					JOptionPane.showMessageDialog(null, "ERROR EN SIM");
				}
			}
		});
	}
	
	private void iniTable() {
		table = new ScrollPanel(getWidth()/2,getHeight()-55);
		table.setLocation((getWidth()/4),70);
		table.border.color("all",Color.blue);
		table.back.setBackground(Color.darkGray);
		table.setLocation(0,20);
		String arr[]= {"ID PROCESO","TIEMPO RAFAGA","TIEMPO LLEGADA","PRIORIDAD"};
		for(int i=0;i<arr.length;i++) {
			JLabel jl = new JLabel(arr[i]);
			etiquetas[i]=jl;
			jl.setSize(table.getWidth()/4,20);			
			jl.setBorder(new LineBorder(Color.blue));
			jl.setLocation(0+(i*jl.getWidth()),0);
			jl.setHorizontalAlignment(JLabel.CENTER);
			jl.setForeground(Color.white);
			add(jl);
		}
		for(int i=0;i<22;i++) {
			JTextField entry[] = new JTextField[etiquetas.length];
			for(int j=0;j<etiquetas.length;j++) {
				JTextField jt = new JTextField();
				entry[j]=jt;
				if(j==0)jt.setText(""+(i+1));
				jt.setHorizontalAlignment(JTextField.CENTER);
				jt.setSize(etiquetas[j].getSize());
				jt.setLocation(etiquetas[j].getX(),i*jt.getHeight());
				table.back.add(jt);				
			}
			entrys.add(entry);
		}
		add(table);
	}

	public void run() {
		
	}
	
	public static void main(String args[]) {
		new Ventana();
	}
}
