package app;
import javax.swing.JFrame;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Random;

public class Muestra extends JFrame{
	
	private int di[] = {-1,0,1,0};
	private int dj[] = {0,1,0,-1};
	
	int size = 511;
	private int color=0;
	int x = 0, y = 0;
	boolean BFS = true;
	int pos = 0;
	LinkedList<Point> q = new LinkedList<>();
	
	public Muestra() throws Exception{
		
		setSize(size,size);
		
		setLocationRelativeTo(null);
		setUndecorated(true);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setVisible(true);
		iniciarAnimacion();
		
		addMouseMotionListener(new MouseMotionListener() {

			@Override
			public void mouseDragged(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseMoved(MouseEvent e) {
				x = e.getX();
				y = e.getY();
				
			}	
		});
	
		addMouseListener((MouseListener) new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getButton() == e.BUTTON1)
					BFS = !BFS;
				if(e.getButton() == e.BUTTON3)
					pos = (pos+1)%3;
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});
	}
	
	
	public void iniciarAnimacion() throws Exception{
		
		(new Thread() {
			public void run() {
				while(true) {			
					try {
						if(BFS)mostrarExpansionBFS();
						else mostrarExpansionDFS();
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					//System.out.println(q.size());
					color%=0xFFFFFF;				
					try {
						Thread.sleep(1000/60);
						
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}).start();
		
		
	}
	
	
	
	public void mostrarExpansionBFS() throws Exception{
		//System.out.println("COMENZANDO EXPANSION");
		Graphics gr = getGraphics();
		Random rand = new Random();		
		
		q.push(new Point(this.x,this.y));
		int[][] matrix = new int[size][size];
		matrix[this.y][this.x] = 1;
		
		//System.out.println(x + " " + y);
		
		int last =  1;
		int edge = 1;
		int mascaras[] = {0xFF,0xFF00,0xFF0000};
		int desplazamiento[] = {0,8,16};
		
		
		while(!q.isEmpty()) {
			//Thread.sleep(1);
			Point p = q.poll();
			
			
			int r = (color&mascaras[pos])>>desplazamiento[pos];
			int g = (color&mascaras[(pos+1)%3])>>desplazamiento[(pos+1)%3];
			int b = (color&mascaras[(pos+2)%3])>>desplazamiento[(pos+2)%3];
			
			//System.out.println(r + " " + g + " " + b);
			gr.setColor(new Color(r,g,b));
			gr.fillRect(p.x, p.y, 1, 1);
			color++;
			for(int k = 0; k < di.length ; k++) {
				int newI = p.y+di[k];
				int newJ = p.x+dj[k];
				
				if(newI < 0 || newI == matrix.length|| newJ < 0 || newJ == matrix[newI].length || matrix[newI][newJ] !=0 )continue;
				
				
				q.add(new Point(newJ,newI));
				
				matrix[newI][newJ] = matrix[p.y][p.x]+1;
															
			}			
			/*if(matrix[p.y][p.x]-last >= edge) {
				
				color++;
				
				last = matrix[p.y][p.x];
				try {
					Thread.sleep(1);
				}
				catch(Exception e) {
					
				}
			}*/
			
		}
		//System.out.println("EXPANSION TERMINADA");		
		
	}
	
	public void mostrarExpansionDFS() throws Exception{
		Graphics gr = this.getGraphics();		
		int i = getWidth()/2;
		int j = getHeight()/2;
		
		LinkedList<Point> q = new LinkedList<>();
		
		q.push(new Point(x,y));
		int[][] matrix = new int[getWidth()][getHeight()];
		matrix[y][x] = 1;
		
		int last =  1;
		int edge = 1;
		
		int mascaras[] = {0xFF,0xFF00,0xFF0000};
		int desplazamiento[] = {0,8,16};
		
		
		
		while(!q.isEmpty()) {
			Point p = q.poll();
			//Thread.sleep(10);
						
			int r = (color&mascaras[pos])>>desplazamiento[pos];
			int g = (color&mascaras[(pos+1)%3])>>desplazamiento[(pos+1)%3];
			int b = (color&mascaras[(pos+2)%3])>>desplazamiento[(pos+2)%3];
			
			//System.out.println(r + " " + g + " " + b);
			gr.setColor(new Color(r,g,b));
			gr.fillRect(p.x, p.y, 1, 1);
			
			color++;
			for(int k = 0; k < di.length ; k++) {
				int newI = p.y+di[k];
				int newJ = p.x+dj[k];
				
				if(newI < 0 || newI == getHeight() || newJ < 0 || newJ == getWidth() || matrix[newI][newJ] !=0 )continue;
				
				
				q.addFirst(new Point(newJ,newI));
				
				matrix[newI][newJ] = matrix[p.y][p.x]+1;
															
			}			
			
			/*if(matrix[p.y][p.x]-last >= edge) {
										
				last = matrix[p.y][p.x];
				try {
					Thread.sleep(1);
				}
				catch(Exception e) {
					
				}
			}*/
			
		}
		
	}
	
	public void atenderCliente() {
		PriorityQueue<Cliente> q = new PriorityQueue<>();
		
		for(int i=0;i<clientes.size();i++)
			q.add(clientes.get(i));
		
		while(!q.isEmpty() && getDineroEnExistencia() == 0) {
			Cliente c = q.poll();
			int monto = c.getMonto();
			if(monto > 2000)monto = 2000;
			if(monto > getDineroEnExistencia)continue;
			
			else {
				dineroEnExistencia -= monto;
				
				c.setMonto(c.getMonto()-monto);
				if(c.getMonto() > 0)q.add(c);
			}
			
		}
		
	}
	
	public void aplicarSorteo(int inicio,int fin,int i) {
		int l = 0;
		int r = clientes.size()-1;
		int m;
		
		while(l<=r) {
		
			m = (l+r)/2;
			int id = clientes.get(m).getId(); 
			if( id > inicio)r = m-1;
			if( id < inicio)l = m+1;
			if( id == inicio) {
				clientes.get(m).setPrioridad(clientes.get(m).getPrioridad()+i);
				return;
			}
			
		}
		
		m++;
		if(m>clientes.size())return;
		Cliente c = clientes.get(m);
		if(c.getId() <= fin)
			c.setPrioridad(c.getPrioridad()+i);
	}
	
	public int gradoExtern(int index) {
		int gradoExterno = 0;
		for(int j=0;j<matrix[i].length;j++)
			if(matrix[index][j])gradoExterno++;
		return gradoExterno;
	}
	
	public int gradoIntern(int index) {
		int gradoInterno = 0;
		for(int i=0;i<matrix.length;i++) {
			if(matrix[i][index])gradoInterno++;
		}
		return gradoInterno;
	}
	
	public Cajero cajeroMayorIncidencia() {
		
		int gradoInterno = 0;
		int gradoExterno = 0;
		int grado = 0;
		int Cajero c = null;
		for(int i=0;i<matrix.length;i++) {
			gradoInterno = gradoExterno = 0;
			gradoExterno = gradoExtern(i);
			gradoInterno = gradoIntern(i);
			int g = gradoExterno-gradoInterno();
			if(g>grado)c = cajeros.get(i);
		}
		
		return c;
		
	}
	
	public static void main(String[] args)throws Exception{
		new Muestra();		
	}

}
