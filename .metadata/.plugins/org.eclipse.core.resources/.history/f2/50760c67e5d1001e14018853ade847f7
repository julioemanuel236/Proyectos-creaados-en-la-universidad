import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

public class Arbol<T> {
	
	private Arbol<T> hijoIzq,hijoDer;
	private T dato;

	public Arbol() {}
	
	public Arbol(T dato) {
		this.dato = dato;
	}
	
	public Arbol<T> getHijoIzquierdo(){
		return hijoIzq;
	}
	
	public Arbol<T> getHijoDerecho(){
		return hijoDer;
	}
	
	public void setHijoIzquierdo(Arbol<T> hijo) {
		this.hijoIzq = hijo;
	}
	
	public void setHijoDerecho(Arbol<T> hijo) {
		this.hijoDer = hijo;
	}
		
	public static void main(String args[]) {
		Arbol<Character> arbol = new Arbol<>('A');
		arbol.setHijoIzquierdo(new Arbol<Character>('B'));
		arbol.setHijoDerecho(new Arbol<Character>('C'));
		arbol.getHijoIzquierdo().setHijoIzquierdo(new Arbol<Character>('D'));
		arbol.getHijoIzquierdo().setHijoDerecho(new Arbol<Character>('E'));
		arbol.getHijoDerecho().setHijoIzquierdo(new Arbol<Character>('F'));
		arbol.getHijoDerecho().setHijoDerecho(new Arbol<Character>('G'));
		arbol.getHijoIzquierdo().getHijoIzquierdo().setHijoIzquierdo(new Arbol<Character>('H'));
		arbol.getHijoIzquierdo().getHijoIzquierdo().setHijoDerecho(new Arbol<Character>('I'));
		arbol.getHijoDerecho().getHijoDerecho().setHijoDerecho(new Arbol<Character>('J'));
		
		System.out.println(cantidadNodos(arbol));
		System.out.println(altura(arbol));
		recorridoInorden(arbol);
	}
	
	public static int cantidadNodos(Arbol arbol) {
		int cant = 1;
		if(arbol.getHijoIzquierdo() != null)
			cant+= cantidadNodos(arbol.getHijoIzquierdo());
		if(arbol.getHijoDerecho() != null)
			cant+= cantidadNodos(arbol.getHijoDerecho());
		System.out.println("POR DEBAJO DE MI HAY " + arbol.dato + " " + cant);
		return cant;
	}
	
	public static int altura(Arbol arbol) {		
		int a1 = 0,a2 = 0;
		if(arbol.getHijoIzquierdo() != null) {
			a1 = altura(arbol.getHijoIzquierdo());
			
		}
		if(arbol.getHijoDerecho()!=null) {
			a2 = altura(arbol.getHijoIzquierdo());			
		}
		
		return 1 + Math.max(a1, a2);
		
	}
	
	public static void recorridoInorden(Arbol arbol) {
		 List<Integer> recorrido = new ArrayList<>();
	        Stack<Arbol> pila = new Stack<>();
	        Arbol nodoActual = arbol;

	        while (nodoActual != null || !pila.isEmpty()) {
	            while (nodoActual != null) {
	                pila.push(nodoActual);
	                nodoActual = nodoActual.getHijoIzquierdo();
	            }
	            nodoActual = pila.pop();
	            System.out.println(nodoActual.valor);
	            nodoActual = nodoActual.getHijoDerecho();
	        }	
			
			
		}
		
	}
}
