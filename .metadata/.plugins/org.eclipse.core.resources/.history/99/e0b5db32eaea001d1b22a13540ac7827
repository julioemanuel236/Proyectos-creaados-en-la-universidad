package gui;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import bikes.*;
import javax.swing.*;




public class MainWindow extends JFrame{

	// Define the properties and features of the basic bike type 
	// This file is not intended for execution so there is no need for a PSVM

	// BasicBike is the base class or (parent class) or (super class) or (root class) for all the other 4 
	// classes we will be writing

	// Base class is used to describe the common attributes for all the bikes we want to include
	// In general the base class must be the least common demonimator of sorts for all the classes
	// one would want to define. This would depend on the problem one is attempting to solve. 

	// What is the problem we are trying to solve?
	// We want to create an inventory management system for a bike shop 
	// This implies we need a way to model a bike for sale that is in the shop
	// We need to know the types of bikes that are in the shop

	// We can then create a class for each bike type and then create objects when ever new inventory 
	// arrives at the shop or delete the objects when the bikes are sold or lost

	// Base class or Root or Parent class or Super class are name that are all used interchangeably

	public  class BasicBike
	{
		// Public member (fellow) variables - inheriatable
		public int maxSpeed; // This is the max safe operating speed
		public int noOfGears; // No of gears for the bike
		public String paintColor; // Frame color for the bike
		public String safetyFeatures; // List of safety features
		public int currSpeed; //A variable to hold the current speed (when testing)
		
		// Private member variable - NOT INHERITABLE
		private int justAnExample;
		
		// Protected member variable - Selectively inheritable
		protected int justAnOtherExample;

		// Constructors
		
		// Null 
		public BasicBike()
		{
			maxSpeed = 0;
			noOfGears = 0;
			paintColor = "";
			safetyFeatures = "";
			currSpeed = 0;
		}
		
		public BasicBike(int S)
		{
			maxSpeed = S;
			noOfGears = 0;
			paintColor = "";
			safetyFeatures = "";
			currSpeed = 0;
		}
		
		public BasicBike(int S, int G)
		{
			maxSpeed = S;
			noOfGears = G;
			paintColor = "";
			safetyFeatures = "";
			currSpeed = 0;
		}
		
		public BasicBike(int S, int G, String C)
		{
			maxSpeed = S;
			noOfGears = G;
			paintColor = C;
			safetyFeatures = "";
			currSpeed = 0;
		}
		
		public BasicBike(int S, int G, String C, String SF)
		{
			maxSpeed = S;
			noOfGears = G;
			paintColor = C;
			safetyFeatures = SF;
			currSpeed = 0;
		}

		// The above multiple constructors for a class is an example of PolyMorphism
		// Poly = Many and Morp = forms i.e. the same method having many forms (different list of 
		// arguments being passed to it) this is aka method signature
		
		// Methods 
		// Public methods - These are inheritable methods
		// These methods are open to access by anyone
		
		public void applyBrake(int decrement)
		{
			if(currSpeed > 0)
				currSpeed -= decrement;
			if (currSpeed < 0)
				currSpeed = 0;
		}
		
		public void speedUp(int increment)
		{
			if(currSpeed < maxSpeed)
				currSpeed += increment;
			if(currSpeed > maxSpeed)
				currSpeed = maxSpeed;		
		}
		
			
		public String getInfo()
		{
			String msg;
			msg = "Bike Info: {Max speed setting: " + maxSpeed + " | No of gears: " + noOfGears + " | Frame color: " + paintColor + " | Safety features: " + safetyFeatures + "}";
			return msg;
		}
		
		// Getters and Setters for public variable are not needed as they can be 
		// accessed freely by others.
		
		// Private methods - These methods are NOT inheritable
		// These methods are meant to be used by object of this (base) class ONLY

		// Protected methods - These methods are selectively inheritable
		// These methods are accessable by objects of this (base) class and objects of any interited class
		
		// PSVM is not needed in this example as this file is not intented for 
		// execution rather its for the main execution class/file to import
		
		
		public String[] getDatos() {
			return null;
		}
		
		

	}

	public class MountainBike extends BasicBike
	{
		// There are properties and methods that are specific to the MountainBike 
		// class. There are in addition to the inherited ones from the base class (BasicBike). 
		
		// public variables
		public int seatHeight;
		public boolean fullSuspension;
		public boolean flatProofTyres;
		
		// protected variable
		
		// private variables
		
		// Constructors  - only one is used here - you can have multiple 
		// constructors if you want to
		
		public MountainBike(int SH, boolean FS, boolean FPT, int S, int G, String C, String SF)
		{
			//Passing the base class parameters to the base class constructor
			// "super" is a keyword
			// Make sure this is the first line in any inherited class' constructor
			super(S, G, C, SF);
			// super(); - to call the base class's constructor - it is the same as 
			// BasicBike();
			// super.noOfGears is not the same as this.noOfGears
			
			this.seatHeight = SH;
			this.fullSuspension = FS;
			this.flatProofTyres = FPT;
		}
		
			
		// Methods 
		
		// getters and setters
		
		// Getters and Setters for public variable are not needed as they can be 
		// accessed freely by others.
		
		// behavior methods
		
		// Polymorphism (run time) - this inherited class method OVERRIDES 
		// the base class method
		
		public String getInfo()
		{
			String msg;
			msg = "Bike Info 1/2: {Max speed setting: " + maxSpeed + " | No of gears: " + noOfGears + " | Frame color: " + paintColor + " | Safety features: " + safetyFeatures + "}\n";
			msg = msg + "Bike Info 2/2: {Seat Height: " + seatHeight + " | Full Suspension " + fullSuspension + " | Flat Proof Tyres " + flatProofTyres + " }\n";
			return msg;
			
		}

	} // End class MountainBike

	
	public class EBike extends MountainBike
	{
		// There are properties and methods that are specific to the MountainBike 
		// class. There are in addition to the inherited ones from the base class (BasicBike). 
		
		// public variables
		public int rangeMiles; // Range in miles
		public String batteryType; // Li-ion, NiMH, SLA, AGM, LiPo
		public int batterySize; // A-hours
		public int batteryVolt; // 12/24/36/48 
		public double motorPower; // in KW 0.5. 1.0 etc
		
		// protected variable
		
		// private variables
		
		// Constructors  - only one is used here - you can have multiple 
		// constructors if you want to
		
		public EBike(int RM, String BTy, int BSz, int BVt, double MP, int SH, boolean FS, boolean FPT, int S, int G, String C, String SF)
		{
			super(SH, FS, FPT, S, G, C, SF);
					
			this.rangeMiles = RM;
			this.batteryType = BTy;
			this.batterySize = BSz;
			this.batteryVolt = BVt;
			this.motorPower = MP;		
			
		}
		
			
		// Methods 
		
		public String getBatteryInfo()
		{
			String msg = "";
			msg = "Battery Type: " + this.batteryType + " | Battery Size: " + this.batterySize + " | Battery Voltage: " + this.batteryVolt;
			return msg;
		}
		
		
		// getters and setters
		
		// Getters and Setters for public variable are not needed as they can be 
		// accessed freely by others.
		
		// behavior methods
		
		// Polymorphism (run time) - this inherited class method OVERRIDES 
		// the base class method
		
		public String getInfo()
		{
			String msg;
			msg = "Bike Info 1/4: {Max speed setting: " + maxSpeed + " | No of gears: " + noOfGears + " | Frame color: " + paintColor + " | Safety features: " + safetyFeatures + "}\n";
			msg = msg + "Bike Info 2/4: {Seat Height: " + seatHeight + " | Full Suspension " + fullSuspension + " | Flat Proof Tyres " + flatProofTyres + " }\n";
			msg = msg + "Bike Info 3/4: {" + getBatteryInfo() + " }\n";
			msg = msg + "Bike Info 3/4: {Range in Miles: " + rangeMiles + " | Motor Power: " + motorPower + " }\n";
			
			return msg;
			
		}

	} // End class EBike

	int MAX_INVENTORY_SIZE_PER_TYPE = 100;	
	//arrays for data
	BasicBike[] basicBikeArray = new BasicBike[MAX_INVENTORY_SIZE_PER_TYPE]; // Creating  // Declaring the array 
		
	MountainBike[] mountainBikeArray = new MountainBike[MAX_INVENTORY_SIZE_PER_TYPE]; // Declare 	
	
	RoadBike[] roadBikeArray = new RoadBike[MAX_INVENTORY_SIZE_PER_TYPE]; // Creating // Declare 	
	
	EBike[] eBikeArray = new EBike[MAX_INVENTORY_SIZE_PER_TYPE]; // Declare 	
	
	RoadEBike[] roadEBikeArray = new RoadEBike[MAX_INVENTORY_SIZE_PER_TYPE]; // Declare 	
	
	JPanel table;
	JPanel newz;
	JPanel editz;
	JTextArea info;
	
	public MainWindow(){
		int w=600,h=700;//size of the windows
		setResizable(false);//can not change the size
		setSize(w,h);
		setLayout(null);//to put things whetever u whant
		setLocationRelativeTo(null);//put the windows at center of screen
		setDefaultCloseOperation(EXIT_ON_CLOSE);//really close it when you press the exit X
		setVisible(true);
		iniButtons();//create and asign a funtion to buttons
		iniInfoZone();//create a locate the area to write text for suer
		repaint();
	}
	
	private void iniInfoZone() {
		info = new JTextArea();
		info.setSize(getWidth(),getHeight()/2);
		info.setEditable(false);//can edit the text
		JScrollPane jsp = new JScrollPane(info);	//this its for scroll 	
		jsp.setSize(info.getSize());
		jsp.setLocation(0,getHeight()/2 - 50);//set at the bottom middle
		add(jsp);//add to the window 
	}
	
	private void iniButtons() {
		//buttons name
		String texts[] = {"List Selected Inventary","Display All Inventory","New Bike","Remove a Bike","Edit a existence Bike"};
		
		JButton buttons[] = new JButton[texts.length];
		int x=getWidth()/4,y=5;
		for(int i=0;i<texts.length;i++) {
			JButton jb = new JButton(texts[i]);
			jb.setSize(getWidth()/2,40);
			jb.setLocation(x,y);
			y+=45;
			add(jb);
			buttons[i]=jb;
		}
		
	buttons[0].addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			
			String ops[] = {"Basic Bike","Mountain Bike","Road Bike","EBike","Road EBike"};
			String op = (String)JOptionPane.showInputDialog(null, "Type of Bike","Select Type", JOptionPane.QUESTION_MESSAGE, null, ops, null);
			System.out.println(op);
			info.setText("");
			BasicBike arr[];
			if(op.equals(ops[0])) {
				arr = basicBikeArray;
			}
			else if(op.equals(ops[1])) {
				arr = mountainBikeArray;			
			}
			else if(op.equals(ops[2])) {
				arr = basicBikeArray;
			}
			else if(op.equals(ops[3])) {
				arr = basicBikeArray;
			}
			else {
				arr = basicBikeArray;
			}
			
			for(int i = 0;i<arr.length;i++) {
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}

		}
	});
	
	buttons[1].addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {					
			info.setText("");			
			BasicBike[] arr = basicBikeArray;
			info.setText(info.getText()+"\n-----------------------------------------------------------------------\n"
					+ 					  "|                                  BASIC BIKES                              \n"
					+ 					  "-----------------------------------------------------------------------\n");
			for(int i = 0;i<arr.length;i++) {
				
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}
			info.setText(info.getText()+"\n-----------------------------------------------------------------------\n"
					+ 					  "|                                  MOUNTAIN BIKE                       \n"
					+ 					  "-----------------------------------------------------------------------\n");
			arr = mountainBikeArray;
			for(int i = 0;i<arr.length;i++) {
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}
			
			info.setText(info.getText()+"\n-----------------------------------------------------------------------\n"
					+ 					  "|                                      ROAD BIKE                       \n"
					+ 					  "-----------------------------------------------------------------------\n");
			arr = roadBikeArray;
			for(int i = 0;i<arr.length;i++) {
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}
			
			info.setText(info.getText()+"\n-----------------------------------------------------------------------\n"
					+ 					  "|                                  ELECTRIC BIKE                    \n"
					+ 					  "-----------------------------------------------------------------------\n");
			arr = eBikeArray;
			for(int i = 0;i<arr.length;i++) {
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}
			
			info.setText(info.getText()+"\n-----------------------------------------------------------------------\n"
					+ 					  "|                                ROAD ELECTRIC BIKE                \n"
					+ 					  "-----------------------------------------------------------------------\n");
			arr = roadEBikeArray;
			for(int i = 0;i<arr.length;i++) {
				if(arr[i]!=null)info.setText(info.getText()+arr[i].getInfo()+"\n");
			}
		}
	});	
	
	buttons[2].addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {					
			Control.addToInventory(MAX_INVENTORY_SIZE_PER_TYPE, false , basicBikeArray, mountainBikeArray, roadBikeArray, eBikeArray, roadEBikeArray);
		}
	});	
	
	buttons[3].addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {					
			Control.removeFromInventory(MAX_INVENTORY_SIZE_PER_TYPE, false, basicBikeArray, mountainBikeArray, roadBikeArray, eBikeArray, roadEBikeArray);
		}
	});
	
	buttons[4].addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {					
			Control.modifyCurrentInventory(MAX_INVENTORY_SIZE_PER_TYPE, false, basicBikeArray, mountainBikeArray, roadBikeArray, eBikeArray, roadEBikeArray);
		}
	});
	
	}
				
	public static void main(String args[]) {
		new MainWindow();
	}
	
}
