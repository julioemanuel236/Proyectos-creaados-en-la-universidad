package com.nobody.adMEnestrator;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.CodeSource;
import java.security.ProtectionDomain;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import Ventana.*;
import Ventana.TextField;
import java.util.Set;
import java.util.TreeSet;

public class App extends JFrame{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private Color							 bg;
	private Color							 fg;
	private Color							 fgh;
	private Color						     maincolor;
	private Color							 altern;
	private String 							 username;
	private JLayeredPane 					 Main;
	private JPanel						     root;
	private JPanel 							 topbar; 
	private JPanel							 Menu;
	private JLabel 							 closebt;
	private JLabel 							 clock;
	private JLabel 							 userlabel;
	private Data 							 data;
	private NewZone 						 newz;
	private ShowZone 						 showz;
	private MenuZone						 menuz;
	private BigDecimal 						 total = new BigDecimal(0);
	private Imagen 							 borde;
	private Set<String> 					 categorias = new TreeSet<String>();
	private Set<String> 					 items 		= new TreeSet<String>(); 
	private Map<String,LinkedList<Integer> > tabla 		= new HashMap<String,LinkedList<Integer> >();
	private int								 bordersize=3;
	private byte							 MODE;
	private boolean							 CHG=false;
	
 	private class Login extends JFrame{ 
		JLabel closebt;
		JPanel back;
		JLabel logintxt;
		TextField user;
		public JButton SignUp;
		int width=300;
		int height=175;
		int movinsu=0;
		int su1=120;
		int su2=height+1;
			
		public Login(){
			this.setAlwaysOnTop(true);
			this.setFocusable(true);
			this.setUndecorated(true);
			
			Listeners.addWindowsMove(this);
			this.setSize(width,height);
			this.setBackground(fg);
			this.setLayout(null);
			//mostrar();
			back();
			Closebt();
			logintxt();		
			user();
			signup();
			back.add(user);
			this.setLocationRelativeTo(null);
			user.text.requestFocus();
			this.setVisible(true);
		}

		private void back() {
			back = new JPanel();
			back.setSize(this.getSize());
			back.setLayout(null);
			back.setBackground(bg);
			this.add(back);
		}
		
		private void Closebt() {
			closebt = new JLabel();
			closebt.setSize(40,25);
			closebt.setHorizontalAlignment(SwingConstants.CENTER);
			closebt.setVerticalAlignment(SwingConstants.CENTER);
			closebt.setLocation(0,0);
			closebt.setFont(new Font("Roboto",Font.BOLD,15));
			closebt.setForeground(fg);
			closebt.setText("X");
			Listeners.addRedBG(closebt);
			back.add(closebt);
		}
				
		private void logintxt() {
			logintxt = new JLabel();
			logintxt.setSize(100,50);
			logintxt.setFont(new Font("Roboto",Font.ITALIC,30));
			logintxt.setText("Login");
			logintxt.setHorizontalAlignment(SwingConstants.CENTER);
			logintxt.setVerticalAlignment(SwingConstants.CENTER);
			logintxt.setForeground(fg);
			//logintxt.setOpaque(true);
			logintxt.setLocation((int)((back.getWidth()/2)-(logintxt.getWidth()/2)),0);
			back.add(logintxt);
		}
	
		private void user() {
			user=new TextField(250,50,"User","/user_"+(MODE==0?"dark":"light")+".png");
			user.setLocation(user.centrarx(back),user.centrary(back));
			user.requestFocus();
			user.text.setForeground(fg);
			user.hint.setForeground(fgh);
			user.text.setCaretColor(fg);
		}
		
		private void signup() {
			SignUp = new JButton();
			SignUp.setCursor(new Cursor(Cursor.HAND_CURSOR));
			SignUp.setSize(75,30);
			SignUp.setText("SignUp");
			SignUp.setBackground(maincolor);
			SignUp.setOpaque(true);
			SignUp.setLocation((back.getWidth()/2)-(SignUp.getWidth()/2),su2);
			SignUp.setBorderPainted(false);
			SignUp.setForeground(Color.white);
			SignUp.setEnabled(false);
			SignUp.setActionCommand("\n");
			ActionListener Next = new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {		
					App.this.username=capitalizar(user.text.getText().toCharArray());
					App.Login.this.setVisible(false);
					App.this.setVisible(true);
					try {
						App.this.data = new Data(getRutaRecurso(App.this.username));
					} catch (URISyntaxException e1) {
						e1.printStackTrace();
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					App.this.Main();
				}
				
			};
			SignUp.addActionListener(Next);
			user.KeyButton(SignUp, '\n');
			ComponentListener habilitar = new ComponentListener() {

				@Override
				public void componentResized(ComponentEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void componentMoved(ComponentEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void componentShown(ComponentEvent e) {
					SignUp.setEnabled(false);
					movinsu=-1;
					(new Thread() {
						public void run() {
							while(movinsu==-1&&SignUp.getY()<su2) {
								SignUp.setLocation(SignUp.getX(),SignUp.getY()+4);
								SignUp.repaint();
								try {
									sleep(1);
								}
								catch(Exception e) {
									
								}
							}
						}
					}).start();
				}

				@Override
				public void componentHidden(ComponentEvent e) {
					SignUp.setEnabled(true);
					movinsu=1;
					(new Thread() {
						public void run() {
							while(movinsu==1&&SignUp.getY()>su1) {
								SignUp.setLocation(SignUp.getX(),SignUp.getY()-3);
								SignUp.repaint();
								try {
									sleep(1);
								}
								catch(Exception e) {
									
								}
							}
							
						}
					}).start();
				}
				
			};
			user.hint.addComponentListener(habilitar);
			back.add(SignUp);
		}
		
		private void mostrar() {
			(new Thread() {
				public void run() {
					int divisor=100;
					int x=Login.this.getWidth()/divisor;
					int y=Login.this.getHeight()/divisor;
					Login.this.setSize(0,0);
					Login.this.setLocationRelativeTo(null);
					Login.this.setVisible(true);
					for(int i=0;i<divisor;i++) {
						Login.this.setSize(Login.this.getWidth()+x,Login.this.getHeight()+y);
						Login.this.repaint();
						Login.this.setLocationRelativeTo(null);
						try {
							sleep(5);
						}
						
						catch(Exception e) {
							
						}
					}
					
				
				}
			}).start();
		}
		
	}

	private class Data{
		public static FileReader fr;
		public static FileWriter fw;
		public boolean newuser;
		Map<Integer,Entry> data = new HashMap();
		int next=0;
		
		public Data(String s) throws URISyntaxException, IOException {
				newuser=false;
				System.out.println("CARGANDO DATOS");
			try {
				fr = new FileReader(s);
			}
			catch(Exception e) {
				String to=App.this.getRutaRecurso(s);
				//System.out.println(to);
				newuser=true;
				System.out.println("new user:"+newuser);
				try {
					fw = new FileWriter(to,true);
					fw.close();
				} 
				catch (IOException e1) {
				}
			}
			Cargar_Datos();
		}
		
		public void Cargar_Datos() {
			
			FileInputStream fis=null;
			try {
				String to = getRutaRecurso(App.this.username);
				fis= new FileInputStream(to);
				ObjectInputStream oos = new ObjectInputStream(fis);
				Map<Integer,Entry> readObject = (Map<Integer,Entry>)oos.readObject();
				data=readObject;
				//System.out.println(data.get(0).Nombre+"\n"+data.get(0).Precio+"\n"+data.get(0).Tipo);
				fis.close();
				next=data.keySet().size();
				for(int i:data.keySet()) {
					Entry e=data.get(i);
					//System.out.println(e);
					//System.out.print(userlabel.getText());
					if(tabla.get(e.Tipo)==null)tabla.put(e.Tipo,new LinkedList<Integer>());
					tabla.get(e.Tipo).add(i);
					categorias.add(e.Tipo);
					items.add(e.Nombre);	
				}
			//	System.out.println(tabla);
			}
			catch(Exception e){
				System.out.println(e);
			}

		}
		
		public void Guardar_Datos() throws IOException, URISyntaxException {
			FileOutputStream fos=null;
			String to = getRutaRecurso(App.this.username);
			try {
				fos= new FileOutputStream(to);
				ObjectOutputStream oos = new ObjectOutputStream(fos);
				oos.writeObject(data);
				fos.close();
			}
			catch(Exception e){
			//	System.out.println(e);
			}
		}
	}
	
	private class NewZone extends JPanel{
		private boolean UP=true;
		private boolean DOWN=false;
		public boolean e1=false,e2=false,e3=false;
		JWindow cpred = new JWindow();
		JWindow ipred = new JWindow();
		TextField name,price,categoria;
		JButton accept;
		Imagen fondo;
		
		public NewZone() {
			this.setOpaque(false);
			this.setLayout(null);
			this.setBackground(bg);
			this.setSize(250,220);
			this.setLocation((Main.getWidth()/2)-(this.getWidth()/2),-this.getHeight());
			//System.out.println(this.getBounds());
			
			name = new TextField(240,50,"Item","/centro_comercial_"+(MODE==0?"dark":"light")+".png");
			name.setLocation(name.centrarx(this),5);
			name.text.setForeground(fg);
			name.hint.setForeground(fgh);
			name.text.setCaretColor(fg);
			name.text.getDocument().addDocumentListener(new DocumentListener() {

				@Override
				public void insertUpdate(DocumentEvent e) {
					ipred.removeAll();
					ipred.setVisible(false);
					ipred= new JWindow();
					crear_prediccion(ipred, name);
				}

				@Override
				public void removeUpdate(DocumentEvent e) {
					boolean b=false;
					try {
						b=!(e.getDocument().getText(0, e.getDocument().getLength()).isEmpty());
					}
					catch(Exception ee) {
						
					}
					if(b) {
						ipred.removeAll();
						ipred.setVisible(false);
						ipred= new JWindow();
						crear_prediccion(ipred, name);
					}
					else ipred.setVisible(false);
				}

				@Override
				public void changedUpdate(DocumentEvent e) {
					ipred.removeAll();
					ipred.setVisible(false);
					ipred= new JWindow();
					crear_prediccion(ipred, name);
					
				}
				
			});
			name.text.addFocusListener(new FocusListener() {

				@Override
				public void focusGained(FocusEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void focusLost(FocusEvent e) {
					ipred.setVisible(false);
					
				}
				
			});
			name.KeyToNext((char)KeyEvent.VK_ENTER);
			
			price = new TextField(240,50,"Price","/dolar_"+(MODE==0?"dark":"light")+".png");
			price.setLocation(price.centrarx(this),60);
			price.text.setForeground(fg);
			price.hint.setForeground(fgh);
			price.text.setCaretColor(fg);
			price.setNumericMode();
			price.KeyToNext((char)KeyEvent.VK_ENTER);
			
			categoria = new TextField(240,50,"Tipe","/categorias_"+(MODE==0?"dark":"light")+".png");
			categoria.setLocation(categoria.centrarx(this),105);
			categoria.hint.setForeground(fgh);
			categoria.text.setCaretColor(fg);
			categoria.text.setForeground(fg);
			categoria.text.getDocument().addDocumentListener(new DocumentListener() {

				@Override
				public void insertUpdate(DocumentEvent e) {
					cpred.removeAll();
					cpred.setVisible(false);
					cpred=new JWindow();
					crear_prediccion(cpred, categoria);
				}

				@Override
				public void removeUpdate(DocumentEvent e) {
					boolean b=false;
					try {
						b=!(e.getDocument().getText(0, e.getDocument().getLength()).isEmpty());
					}
					catch(Exception ee) {
						
					}
					if(b) {
						cpred.removeAll();
						cpred.setVisible(false);
						cpred=new JWindow();
						crear_prediccion(cpred, categoria);
					}
					else cpred.setVisible(false);
				}

				@Override
				public void changedUpdate(DocumentEvent e) {
					cpred.removeAll();
					cpred.setVisible(false);
					cpred=new JWindow();
					crear_prediccion(cpred, categoria);
					
				}
				
			});
			categoria.text.addFocusListener(new FocusListener() {

				@Override
				public void focusGained(FocusEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void focusLost(FocusEvent e) {
					cpred.setVisible(false);
					
				}
				
			});
			categoria.KeyToNext((char)KeyEvent.VK_ENTER);
			
			fondo = new Imagen(this.getWidth(),this.getHeight(),"/fondo_"+(MODE==0?"dark":"light")+"_transparente.png");
			
			acceptbtn();
			listeners();
			this.add(name);
			this.add(price);
			this.add(categoria);
			this.add(fondo);
			
			Main.setLayer(this, 1);
			Main.add(this);
		}
		
		private void listeners() {

		}
			
		private void crear_prediccion(JWindow pred,TextField tf){	
			pred.setSize(150,0);
			pred.setOpacity(0.9f);
			pred.setLocationRelativeTo(null);
			pred.setBackground(Color.red);
			ShowZone sz = new ShowZone(150,0);
			sz.setLocation(0,0);
			sz.vsb.active=App.this.showz.vsb.active;
			sz.vsb.active=App.this.showz.vsb.inactive;
			sz.border.color("all",maincolor);
			pred.add(sz);
			int k=0;
			for(String i:tf.equals(name)?items:categorias) {
				if(i.toLowerCase().contains(tf.text.getText().toLowerCase())) {
					//System.out.println("Coincidencia con "+i);
					JLabel j = new JLabel(i);
					j.setForeground(fg);
					j.setOpaque(true);
					j.setSize(sz.back.getWidth(),40);
					j.setHorizontalAlignment(j.CENTER);
					j.setVerticalAlignment(j.CENTER);
					j.setBackground(sz.back.getBackground());
					j.addMouseListener(new MouseListener() {

						@Override
						public void mouseClicked(MouseEvent e) {
							// TODO Auto-generated method stub
							
						}

						@Override
						public void mousePressed(MouseEvent e) {
							tf.text.setText(i);
							pred.setVisible(false);
						}

						@Override
						public void mouseReleased(MouseEvent e) {
							// TODO Auto-generated method stub
							
						}

						@Override
						public void mouseEntered(MouseEvent e) {
							j.setBackground(altern);
							
						}

						@Override
						public void mouseExited(MouseEvent e) {
							j.setBackground(bg);
							
						}
						
					});
					j.setLocation(0,k*j.getHeight());
					pred.setSize(pred.getWidth(),pred.getHeight()+j.getHeight()<300?pred.getHeight()+j.getHeight():300);
					sz.setSize(pred.getSize());
					sz.back.setSize(sz.back.getWidth(),sz.back.getHeight()+j.getHeight());
					sz.back.add(j);
					sz.border.setSize(sz.getSize());
					k++;
				}
				
			}
			int ft=0;
			int fws[]=tf.text.getFontMetrics(tf.text.getFont()).getWidths();
			String s=tf.text.getText();
			for(int i=0;i<s.length();i++)
				ft+=fws[s.charAt(i)];
			int x=App.this.getX()+Main.getX()+this.getX()+this.getWidth();
			int y=App.this.getY()+root.getY()+Main.getY()+this.getY();
			pred.setLocation(x,y);
			pred.setVisible(true);
			//System.out.println("Categorias:"+categorias+"\nItems:"+items);
		}
		
		private void acceptbtn() {
			accept = new JButton();
			accept.setCursor(new Cursor(Cursor.HAND_CURSOR));
			accept.setSize(200,30);
			accept.setText("Accept");
			accept.setBackground(maincolor);
			accept.setOpaque(true);
			//center x (this.getWidth()/2)-(accept.getWidth()/2) 
			accept.setLocation((this.getWidth()/2)-(accept.getWidth()/2),this.getHeight());
			accept.setBorderPainted(false);
			accept.setForeground(fg);
			accept.setEnabled(false);
			accept.setFocusable(false);
			ActionListener Next = new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent ee) {		
					Entry e=new Entry(capitalizar(name.text.getText().toCharArray()),
							price.toBigDecimal(),
							capitalizar(categoria.text.getText().toCharArray()));
					data.data.put(data.next++,e);
					if(tabla.get(e.Tipo)==null) {
						LinkedList<Integer> ls = new LinkedList<Integer>();
						ls.add(data.next-1);
						tabla.put(e.Tipo, ls);
						
					}
					else tabla.get(e.Tipo).add(data.next-1);
				//	System.out.print(userlabel.getText());
					Component sz[]=showz.back.getComponents();
						boolean existe=false;
						for(int i=0;i<sz.length;i++) {
							if(sz[i].getName().equals(e.Tipo)) {
								int k =tabla.get(e.Tipo).size();
								ShowZone ss=(ShowZone)sz[i];
								JPanel jp = (JPanel)ss.getComponent(3);
								JLabel jl = (JLabel)jp.getComponent(1);
		
								ss.valor = ss.valor.add(e.Precio);
								jl.setText("$"+ss.valor);
								//System.out.println("lo encontre");
								existe=true;
								ShowZone s =(ShowZone) sz[i];
								total=total.add(e.Precio);
								
								categorias.add(e.Tipo);
								items.add(e.Nombre);	
								actualizar_total(e.Precio,total);
								//App.this.userlabel.setText(username+":  $"+total);
								App.this.userlabel.repaint();
								JPanel p = new JPanel();
								p.setLayout(null);
								p.setSize(s.back.getWidth()-6,60);
								p.setLocation(3,s.back.getHeight()-10);
								p.setOpaque(true);
								p.setBackground(k%2==0?bg:altern);
								configurar_mouselistener_configurar(p,p);
								/*JComponent bordes = new JComponent() {
									@Override
									public void paint(Graphics g) {
										g.setColor(showz.hsb.active);
										g.drawRect(0, -1, this.getWidth(), 1);
										g.drawRect(0, this.getHeight()-1, this.getWidth(), 2);
										g.drawRect(-1, 0, 1,this.getHeight());
										g.drawRect(this.getWidth()-1, 0, 2, this.getHeight());
									}
								};
								bordes.setSize(p.getSize());
								bordes.setLocation(0,0);*/
								JLabel name=new JLabel(e.Nombre);
								JLabel price=new JLabel("$"+e.Precio);
								JLabel date=new JLabel(e.Fecha.getDate()+"/"+e.Fecha.getMonth()+"/"+(1900+e.Fecha.getYear()));
								configurar(name,0,0,s,p);
								configurar(price,0,20,s,p);
								configurar(date,0,40,s,p);
								//p.add(bordes);
								p.add(name);
								p.add(price);
								p.add(date);
								s.back.add(p);				
								s.back.setSize(s.back.getWidth(),s.back.getHeight()+60);
								s.back.repaint();
							}
						}
						if(!existe) {	
							int k=1;
							int i=sz.length;
							String j=e.Tipo;
							categorias.add(e.Tipo);
							items.add(e.Nombre);	
							ShowZone t =new ShowZone(i>0?(i*200)+5-i:5,5,200,showz.getHeight()-25);
							System.out.println(t.getLocation());
							t.valor = t.valor.add(e.Precio);
							t.setName(j);
							JPanel n = new JPanel();
							JLabel nc = new JLabel(j);
							JLabel nt = new JLabel("$"+t.valor);

							n.add(nc);
							n.add(nt);
							n.setLayout(null);
							n.setSize(t.back.getWidth()-2,30);
							n.setOpaque(true);
							n.setBackground(bg);
							n.setLocation(t.back.getX()+1,t.back.getY()+1);
							n.setForeground(fg);
							n.setFont(new Font("Roboto",Font.BOLD,15));
							
							nc.setSize(n.getWidth()/2,30);
							nc.setOpaque(true);
							nc.setBackground(bg);
							nc.setLocation(0,0);
							nc.setHorizontalAlignment(nc.CENTER);
							nc.setForeground(fg);
							nc.setFont(new Font("Roboto",Font.BOLD,15));
							
							nt.setSize(n.getWidth()/2,30);
							nt.setOpaque(true);
							nt.setBackground(bg);
							nt.setLocation(nc.getWidth(),0);
							nt.setHorizontalAlignment(nc.CENTER);
							nt.setForeground(fg);
							nt.setFont(new Font("Roboto",Font.BOLD,15));
							
							t.setLayer(n, 1);
							t.add(n);
							showz.back.add(t);
							showz.back.setSize(t.getX()+t.getWidth()+5,showz.back.getHeight());
							
							
							total = total.add(e.Precio);
							
							nt.setText("$"+e.Precio);
							nt.repaint();
							if(userlabel!=null) {
								actualizar_total(e.Precio,total);
								//App.this.userlabel.setText(username+":  $"+total);
								App.this.userlabel.repaint();
							}
							JPanel p = new JPanel();
							p.setLayout(null);
							p.setSize(t.back.getWidth()-6,60);
							p.setLocation(3,(k*60)-20);
							p.setOpaque(true);
							p.setBackground(k%2==0?bg:altern);
							configurar_mouselistener_configurar(p,p);
							/*JComponent bordes = new JComponent() {
								@Override
								public void paint(Graphics g) {
									g.setColor(showz.hsb.active);
									g.drawRect(0, -1, this.getWidth(), 1);
									g.drawRect(0, this.getHeight()-1, this.getWidth(), 2);
									g.drawRect(-1, 0, 1,this.getHeight());
									g.drawRect(this.getWidth()-1, 0, 2, this.getHeight());
								}
							};
							bordes.setSize(p.getSize());
							bordes.setLocation(0,0);*/
							JLabel name=new JLabel(e.Nombre);
							JLabel price=new JLabel("$"+t.valor);
							JLabel date=new JLabel(e.Fecha.getDate()+"/"+e.Fecha.getMonth()+"/"+(1900+e.Fecha.getYear()));
							configurar(name,0,0,t,p);
							configurar(price,0,20,t,p);
							configurar(date,0,40,t,p);
							//p.add(bordes);
							p.add(name);
							p.add(price);
							p.add(date);
							t.back.add(p);
							k++;
							t.back.setSize(t.back.getWidth(),(k*60)-10);
							
						}
						try {
							data.Guardar_Datos();
						} catch (URISyntaxException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} 

					name.text.setText(null);
					price.text.setText(null);
					categoria.text.setText(null);
					name.text.requestFocus();
				}
				
			};
			accept.addActionListener(Next);
			name.KeyButton(accept, '\n');
			price.KeyButton(accept, '\n');
			categoria.KeyButton(accept, '\n');
			

			ComponentListener habilitar = new ComponentListener() {
				int movinsu=0;
				int su1=170;
				int su2=NewZone.this.getHeight();
				@Override
				public void componentResized(ComponentEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void componentMoved(ComponentEvent e) {
					// TODO Auto-generated method stub
					
				}

				
				private void hab_dis() {
					if(e1&&e2&&e3) {
						accept.setEnabled(true);
						movinsu=1;
						(new Thread() {
							public void run() {
								while(movinsu==1&&accept.getY()>su1) {
									accept.setLocation(accept.getX(),accept.getY()-3);
									accept.repaint();
									try {
										sleep(1);
									}
									catch(Exception e) {
										
									}
								}
								
							}
						}).start();	
					
					}
					else {
						accept.setEnabled(false);
						movinsu=-1;
						(new Thread() {
							public void run() {
								while(movinsu==-1&&accept.getY()<su2) {
									accept.setLocation(accept.getX(),accept.getY()+4);
									accept.repaint();
									try {
										sleep(1);
									}
									catch(Exception e) {
										
									}
								}
							}
						}).start();
					}
				}
				
				@Override
				public void componentShown(ComponentEvent e) {
					if(e.getComponent() == name.hint) 
						e1=false;
					else if(e.getComponent() == price.hint)
						e2=false;
					else if(e.getComponent() == categoria.hint)
						e3=false;
					hab_dis();
				}

				
				@Override
				public void componentHidden(ComponentEvent e) {
					if(e.getSource() == name.hint) 
						e1=true;
					else if(e.getSource() == price.hint)
						e2=true;
					else if(e.getComponent() == categoria.hint)
						e3=true;
					hab_dis();
				}
			};
			name.hint.addComponentListener(habilitar);
			price.hint.addComponentListener(habilitar);
			categoria.hint.addComponentListener(habilitar);
			this.add(accept);
		}
		
		private void UP() {
			UP=true;
			DOWN=false;
			(new Thread() {
				public void run() {
					int k=20;
					while(UP&&NewZone.this.getY()>=-NewZone.this.getHeight()) {
					//	System.out.println("Subiendo");
						NewZone.this.setLocation(NewZone.this.getX(),NewZone.this.getY()-k);
						if(k>2)k--;
						try {
							sleep(10);
							NewZone.this.repaint();
						}
						catch(Exception e) {
							
						}
					
					}
					if(!UP)return;
					NewZone.this.setLocation(NewZone.this.getX(),-NewZone.this.getHeight());
				}
			}).start();
		}

		private void DOWN() {
			DOWN=true;
			UP=false;
			(new Thread() {
				public void run() {
					int k=20;
					while(DOWN&&NewZone.this.getY()<5) {
						//System.out.println("Bajando");
						NewZone.this.setLocation(NewZone.this.getX(),NewZone.this.getY()+k);
						if(k>2)k--;
						try {
							sleep(10);
							NewZone.this.repaint();
						}
						catch(Exception e) {
							
						}
					}
					if(!DOWN)return;
					NewZone.this.setLocation(NewZone.this.getX(),5);
				}
			}).start();
		}
		
	}
	
	private class ShowZone extends ScrollPanel{
		
		public BigDecimal valor= new BigDecimal(0);
		
		public ShowZone() {
			this.setLocation(0,0);
			this.setSize(App.this.Main.getWidth(),App.this.Main.getHeight());
			this.back.setSize(this.getSize());
			this.back.setBackground(bg);
			this.border.show("left",false);
			this.border.show("down",false);
			this.border.show("right",false);
			init();
		}	
		
		public ShowZone(int w,int h) {
			this.setSize(w,h);
			this.back.setSize(w,h);
			this.back.setBackground(bg);
			init();
		}

		public ShowZone(int x,int y,int w,int h) {
			this.setSize(w,h);
			this.back.setSize(w,h);
			this.back.setBackground(bg);
			this.setLocation(x,y);
			init();
		}
		
		public void init() {
			this.vsb.toRight();
			this.hsb.toDown();
			this.hsb.inactive=Color.gray;
			this.hsb.active=maincolor;
			this.vsb.inactive=Color.gray;
			this.vsb.active=maincolor;
			this.border.setSize(this.getSize());
			this.border.color("all", this.vsb.active);
			Main.setLayer(this,0);
			Main.add(this);
		}
		
		@Override
		public int hashCode() {
			return this.valor.hashCode();
			
		}
	
	}

	private class MenuZone extends JPanel{
		Imagen 			newbtn;
		ToggleButton	changebtn;
		
		public MenuZone() {
			this.setSize(topbar.getWidth()/3,topbar.getHeight());
			this.setLocation((topbar.getWidth()/2)-(this.getWidth()/2),0);
		//	System.out.println(this.getLocation());
			this.setBackground(Color.red);
			this.setOpaque(true);
			this.setLayout(null);
			topbar.add(this);
			
			
		}
		
		public void ini_buttons() {
			if(changebtn==null) {
				changebtn= new ToggleButton(15,this.getHeight()){
					@Override
					public void actionPerformed() {
						//System.out.println(MenuZone.this.changebtn.actioning+" "+MenuZone.this.changebtn.moving);
						switch(MODE) {
						case 1:
							MenuZone.this.changebtn.ball=Color.DARK_GRAY;
							
							setDarkMode();
						break;
						
						case 0:
							MenuZone.this.changebtn.ball=Color.white;
							setLightMode();
						break;
						}
					}
				};
				changebtn.setLocation(this.getWidth()-closebt.getWidth()-changebtn.getWidth(),0);
				changebtn.left=new Color(255,127,0);
				changebtn.right=new Color(20,144,222);
				changebtn.ball=bg;
				changebtn.border=altern;
				this.add(changebtn);
			}
			if(newbtn!=null)newbtn.setVisible(false);
			newbtn = new Imagen(this.getHeight(),this.getHeight(),"/carrito_plus_"+(MODE==0?"dark":"light")+".png");
			newbtn.setLocation(0,0);
			this.add(newbtn);
			__Listeners();
		}
		
		private void __Listeners() {
			newbtn.addMouseListener(new MouseListener() {

				@Override
				public void mouseClicked(MouseEvent e) {

					
				}

				@Override
				public void mousePressed(MouseEvent e) {
					
					if(e.getButton()==e.BUTTON1) {
						if(newz.UP) {
							newz.DOWN();
						}
						else {
							if(newz.DOWN)newz.UP();
							newz.cpred.setVisible(false);
							newz.ipred.setVisible(false);
						}
					}
					
				}

				@Override
				public void mouseReleased(MouseEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void mouseEntered(MouseEvent e) {
					// TODO Auto-generated method stub
					
				}

				@Override
				public void mouseExited(MouseEvent e) {
					// TODO Auto-generated method stub
					
				}
				
			});
		}
		
	}
	
	public App() {
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.setSize(960,600);
		this.setUndecorated(true);
		this.setLayout(null);
		this.setBackground(bg);
		this.setLocationRelativeTo(null);
		setDarkMode();
		new Login().user.text.requestFocus();
		this.addComponentListener(new ComponentListener(){
			@Override
			public void componentResized(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void componentMoved(ComponentEvent e) {
				int x=App.this.getX()+Main.getX()+newz.getX()+newz.getWidth();
				int y=App.this.getY()+root.getY()+Main.getY()+newz.getY();
				newz.cpred.setLocation(x,y);
				newz.ipred.setLocation(x,y);
				
			}

			@Override
			public void componentShown(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void componentHidden(ComponentEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		});
	}
		
	private void Main() {
		
		Menu();	
		TopBar();			
		MainPanel();		
		Root();
		
		Closebt(menuz);		
		Clock(topbar);		
		Userlabel(topbar);
	
		this.setSize(root.getWidth()+6,root.getHeight()+6);
		this.add(root);		
		setDarkMode();
		newz = new NewZone();		
		
		generate_cate_zone();

		Listeners.addWindowsMove(this);
		
		Bordes();
		/*(new Thread(){
			public void run() {
				while(true) {
					if(MODE==1)setDarkMode();
					else setLightMode();
					try {
						sleep(5000);
					}
					catch(Exception e) {
					}
				}
			}
		}).start();*/
	}
	
	private void Bordes() {
		this.add(borde);
	}
	
	private void Root() {
		root=new JPanel();
		root.setLayout(null);
		root.setBackground(bg);
		root.setLocation(bordersize,bordersize);
		root.setSize(Menu.getWidth()+Main.getWidth(),Menu.getHeight());
		root.add(Menu);
		root.add(Main);
		root.add(topbar);
	}
	
	private void MainPanel() {
		Main = new JLayeredPane();
		Main.setLayout(null);	
		Main.setBackground(bg);
		Main.setOpaque(true);
		Main.setLocation(Menu.getWidth(),topbar.getHeight());
		Main.setSize(this.getWidth()-(bordersize*2),this.getHeight()-topbar.getHeight()-(bordersize*2));
		showz = new ShowZone();
	}
	
	private void TopBar() {
		topbar= new JPanel();
		topbar.setLayout(null);
		topbar.setBackground(bg);
		//topbar.setOpaque(true);
		topbar.setLocation(Menu.getWidth(),0);
		topbar.setSize(this.getWidth(),40);
		menuz = new MenuZone();
	}

	private void Menu() {
		Menu = new JPanel();
		Menu.setLayout(null);
		Menu.setBackground(maincolor);
		Menu.setOpaque(true);
		Menu.setLocation(0,0);
		Menu.setSize(0,this.getHeight());
	}
	
	private void setDarkMode() {
		MODE=0;
		if(borde!=null) {
			borde.setVisible(false);
			borde = new Imagen(this.getWidth(),this.getHeight(),"/bordes_dark.png");
			this.add(borde);
		}
		else borde = new Imagen(this.getWidth(),this.getHeight(),"/bordes_dark.png");
		bg=Color.DARK_GRAY;
		fg=Color.white;
		fgh=Color.gray;
		altern = new Color(bg.getRed()-10,bg.getGreen()-10,bg.getBlue()-10);
		maincolor = new Color(20,144,222);
		change_mode(this);
		CHG=false;
		
	}
	
	private void  setLightMode() {
		MODE=1;
		if(borde!=null) {
			borde.setVisible(false);
			borde = new Imagen(this.getWidth(),this.getHeight(),"/bordes_light.png");
			this.add(borde);
		}
		else borde = new Imagen(this.getWidth(),this.getHeight(),"/bordes_light.png");
		bg=Color.white;
		fg=Color.darkGray;
		fgh=Color.lightGray;
		altern = new Color(bg.getRed()-10,bg.getGreen()-10,bg.getBlue()-10);
		maincolor=new Color(255,127,0);
		//maincolor=Color.green;
		change_mode(this); 
		CHG=false;
		
	}
	
	private void addnewzmove() {

		Main.addMouseMotionListener(new MouseMotionListener() {
			
			@Override
			public void mouseMoved(MouseEvent e) {
				//System.out.println(e.getX()+" "+e.getY());
				if(e.getY()>App.this.Main.getHeight()-newz.getHeight()&&
				   e.getX()>newz.getX()) {
					newz.UP();
				}
				else if(e.getY()<App.this.Main.getHeight()-newz.getHeight()) {
					newz.DOWN();
				}
				
			}
			
			@Override
			public void mouseDragged(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		});
	}
	
	private void generate_cate_zone() {
		int i=0;
		//System.out.println(categorias.toString());
		for(String j:categorias) {
			ShowZone t =new ShowZone(i>0?(i*200)+5-i:5,5,200,showz.getHeight()-25);
			//System.out.println(t.getLocation());
			t.setName(j);
			JPanel n = new JPanel();
			JLabel nc = new JLabel(j);
			JLabel nt = new JLabel("$"+0);

			n.add(nc);
			n.add(nt);
			n.setLayout(null);
			n.setSize(t.back.getWidth()-2,30);
			n.setOpaque(true);
			n.setBackground(bg);
			n.setLocation(t.back.getX()+1,t.back.getY()+1);
			n.setForeground(fg);
			n.setFont(new Font("Roboto",Font.BOLD,15));
			
			nc.setSize(n.getWidth()/2,30);
			nc.setOpaque(true);
			nc.setBackground(bg);
			nc.setLocation(0,0);
			nc.setHorizontalAlignment(nc.CENTER);
			nc.setForeground(fg);
			nc.setFont(new Font("Roboto",Font.BOLD,15));
			
			nt.setSize(n.getWidth()/2,30);
			nt.setOpaque(true);
			nt.setBackground(bg);
			nt.setLocation(nc.getWidth(),0);
			nt.setHorizontalAlignment(nc.CENTER);
			nt.setForeground(fg);
			nt.setFont(new Font("Roboto",Font.BOLD,15));
			
			t.setLayer(n, 1);
			t.add(n);
			showz.back.add(t);
			showz.back.setSize(t.getX()+t.getWidth()+5,showz.back.getHeight());
			int k=1;
			for(int a:tabla.get(j)) {	
				Entry e=data.data.get(a);
				total = total.add(e.Precio);
				//System.out.println(ft+" + "+e.Precio+" = "+(ft+e.Precio));
				t.valor=t.valor.add(e.Precio);
				nt.setText("$"+t.valor);
				nt.repaint();
				if(userlabel!=null) {
					App.this.userlabel.setText("$"+total);
					App.this.userlabel.repaint();
				}
				JPanel p = new JPanel();
				p.setLayout(null);
				p.setSize(t.back.getWidth()-6,60);
				p.setLocation(3,(k*60)-20);
				p.setOpaque(true);
				p.setBackground(k%2==0?bg:altern);
				configurar_mouselistener_configurar(p,p);
				/*JComponent bordes = new JComponent() {
					@Override
					public void paint(Graphics g) {
						g.setColor(showz.hsb.active);
						g.drawRect(0, -1, this.getWidth(), 1);
						g.drawRect(0, this.getHeight()-1, this.getWidth(), 2);
						g.drawRect(-1, 0, 1,this.getHeight());
						g.drawRect(this.getWidth()-1, 0, 2, this.getHeight());
					}
				};
				bordes.setSize(p.getSize());
				bordes.setLocation(0,0);*/
				JLabel name=new JLabel(e.Nombre);
				JLabel price=new JLabel("$"+e.Precio);
				JLabel date=new JLabel(e.Fecha.getDate()+"/"+e.Fecha.getMonth()+"/"+(1900+e.Fecha.getYear()));
				configurar(name,0,0,t,p);
				configurar(price,0,20,t,p);
				configurar(date,0,40,t,p);
				//p.add(bordes);
				p.add(name);
				p.add(price);
				p.add(date);
				t.back.add(p);
				k++;
				t.back.setSize(t.back.getWidth(),(k*60)-10);
				
			}
			i++;
		}

	}
	
	private void configurar_mouselistener_configurar(JComponent A,JComponent B) {
		A.addMouseListener(new MouseListener() {
			Color out=B.getBackground();
			Color over= new Color(out.getRed()-20,out.getGreen()-20,out.getBlue()-20);
			boolean mover=false;
			boolean mout=false;
			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				mover=true;
				mout=false;
				(new Thread() {
					
					public void run() {
	
						Color now=B.getBackground();
						int r=now.getRed(),g=now.getGreen(),b=now.getBlue();
						while(mover) {
							//System.out.println("obscureciendo "+mover);
							if(r>over.getRed())r--;
							if(g>over.getGreen())g--;
							if(b>over.getBlue())b--;
							B.setBackground(new Color(r,g,b));
							if(r==over.getRed()&&
							   g==over.getGreen()&&
							   b==over.getBlue())return;
							try {
								sleep(10);
							}
							catch(Exception e) {
								
							}
						}
					}
					
				}).start();
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				mover=false;
				mout=true;
				(new Thread() {
					
					public void run() {
						Color now=B.getBackground();
						int r=now.getRed(),g=now.getGreen(),b=now.getBlue();
						while(mout) {
							//System.out.println("aclarando "+mout);
							if(r<out.getRed())r++;
							if(g<out.getGreen())g++;
							if(b<out.getBlue())b++;
							B.setBackground(new Color(r,g,b));
							if(r==out.getRed()&&
							   g==out.getGreen()&&
							   b==out.getBlue())return;
						try {
							sleep(10);
						}
						catch(Exception e) {
							
						}
						}
					}
					
				}).start();
				
			}
			
		});
	}
	
	private void configurar(JLabel name,int x,int y,ShowZone t,JPanel p) {
		//configurar_mouselistener_configurar(name,p);
		name.setOpaque(false);
		name.setBackground(bg);
		name.setForeground(fg);
		name.setFont(name.getFont());
		name.setLocation(x,y);
		name.setSize(t.back.getWidth(),20);
		name.setHorizontalAlignment(name.CENTER);

	}
	
	private void Clock(JComponent j) {
		clock = new JLabel();
		clock.setSize(280,topbar.getHeight());
		Font f=closebt.getFont();
		clock.setFont(new Font(f.getFontName(),f.getStyle(),25));
		clock.setHorizontalAlignment(clock.CENTER);
		clock.setVerticalAlignment(clock.CENTER);
		clock.setForeground(fg);
		clock.setLocation(Main.getWidth()-clock.getWidth(),0);
		(new Thread() {
			public void run() {
				while(true) {
					Date d = new Date();
					clock.setText(d.toString().substring(0, 8)+(d.getHours()<10?0:"")+d.getHours()%12+":"+(d.getMinutes()<10?0:"")+d.getMinutes()+":"+(d.getSeconds()<10?0:"")+d.getSeconds()+" "+(d.getHours()>11?"PM":"AM"));
					try {
						sleep(100);
					}
					catch(Exception e) {
						
					}
				}
			}
		}).start();
		j.add(clock);
	}

	private void Userlabel(JComponent j) {
		userlabel = new JLabel("Bienvenido");
		userlabel.setForeground(altern);
		Font f=clock.getFont();
		userlabel.setFont(f);
		userlabel.setSize(topbar.getWidth()/3,topbar.getHeight());
		userlabel.setHorizontalAlignment(SwingConstants.LEFT);
		userlabel.setVerticalAlignment(SwingConstants.CENTER);
		userlabel.setLocation(10,0);
		j.add(userlabel);
	}
	
	private void Closebt(JComponent j) {
		closebt = new JLabel();
		closebt.setSize(40,j.getHeight());
		closebt.setHorizontalAlignment(SwingConstants.CENTER);
		closebt.setVerticalAlignment(SwingConstants.CENTER);
		closebt.setLocation((j.getWidth())-(closebt.getWidth()),0);
		closebt.setFont(new Font("Roboto",Font.BOLD,15));
		closebt.setForeground(fg);
		closebt.setText("X");
		Listeners.addRedBG(closebt);
		j.add(closebt);
	}
	
	private void actualizar_total(BigDecimal A,BigDecimal B) {
		(new Thread() {
			public void run() {
				long tiempo=1000;
				long ti=System.currentTimeMillis();
				long tf=ti+tiempo;
				long ta;
				BigDecimal ini=B.subtract(A);
				BigDecimal d=new BigDecimal(100.00);
				while(System.currentTimeMillis()<=tf) {
					
					ta=System.currentTimeMillis()-ti;
					BigDecimal perc = new BigDecimal((int)(((float)ta/tiempo)*100.00));
					BigDecimal put = ini.add(A.multiply(perc.divide(d)));
					userlabel.setText("$"+put);
//					System.out.println(perc+" "+put);

				}
				userlabel.setText("$"+B);
			}
		}).start();
	}

	private void change_mode(Container j) {
		CHG=true;
		if(j.getClass()==NewZone.class) {
			NewZone nz = (NewZone) j;
			nz.name.text.setForeground(fg);
			nz.name.text.setBackground(bg);
			nz.name.text.setCaretColor(fg);
			int w=nz.name.icon.getWidth();
			int h=nz.name.icon.getHeight();
			URL dir=nz.getClass().getResource("/centro_comercial_"+(MODE==0?"dark":"light")+".png");
			nz.name.icon.setImagen(dir, w, h);
			
			nz.price.text.setForeground(fg);
			nz.price.text.setBackground(bg);
			nz.price.text.setCaretColor(fg);
			w=nz.price.icon.getWidth();
			h=nz.price.icon.getHeight();
			dir=nz.getClass().getResource("/dolar_"+(MODE==0?"dark":"light")+".png");
			nz.price.icon.setImagen(dir, w, h);
			
			nz.categoria.text.setForeground(fg);
			nz.categoria.text.setBackground(bg);
			nz.categoria.text.setCaretColor(fg);
			w=nz.categoria.icon.getWidth();
			h=nz.name.icon.getHeight();
			dir=nz.getClass().getResource("/categorias_"+(MODE==0?"dark":"light")+".png");
			nz.categoria.icon.setImagen(dir, w, h);
			
			
			w=nz.fondo.getWidth();
			h=nz.fondo.getHeight();
			dir=nz.getClass().getResource("/fondo_"+(MODE==0?"dark":"light")+"_transparente.png");
			nz.fondo.setImagen(dir, w, h);
			
			if(nz.ipred.isVisible()) {
				nz.ipred.removeAll();
				nz.ipred.setVisible(false);
				nz.ipred= new JWindow();
				nz.crear_prediccion(nz.ipred, nz.name);
			}
			else if(nz.cpred.isVisible()) {
				nz.cpred.removeAll();
				nz.cpred.setVisible(false);
				nz.cpred= new JWindow();
				nz.crear_prediccion(nz.cpred, nz.categoria);
			}
		}
		if(j.getClass()==TextField.class) {
			TextField t=(TextField) j;
			t.text.setBackground(altern);
			t.text.setForeground(fg);
			t.hint.setBackground(altern);
			t.hint.setForeground(fgh);
		}
		
		else if(j.getClass()==ShowZone.class){
			ShowZone sz = (ShowZone) j;
			sz.border.color("all", maincolor);
			sz.vsb.active=maincolor;
			sz.hsb.active=maincolor;
			for(Component i:sz.getComponents()) {
				if(i.getClass()==JPanel.class) {
					for(Component k:((Container)i).getComponents()) {
						k.setBackground(bg);
						k.setForeground(fg);
					}
				}
			}
			sz.back.setBackground(bg);
			int k=0;
			for(Component i:sz.back.getComponents()) {
				Container c = (Container)i;
				if(i.getClass()==ShowZone.class)change_mode(c);
				
				else if(i.getClass()==JPanel.class) {
					i.setBackground(k%2!=0?bg:altern);
					i.setForeground(fg);
					Component[] arr = c.getComponents();
					for(int l=0;l<c.getComponentCount();l++) {
						if(arr[l].getClass()==JLabel.class) {
							((JLabel)arr[l]).setBackground(bg);
							((JLabel)arr[l]).setForeground(fg);
							i.removeMouseListener(i.getMouseListeners()[0]);
							configurar_mouselistener_configurar((JComponent)i, (JComponent) i);
						}
					}
				}
				k++;
			}
			
		}
		
		else if(j.getClass()==App.class){
			for(Component i:j.getComponents()) {
				change_mode((Container) i);
			}
		}
		
		else if(j.getClass()==JButton.class) {
			j.setBackground(maincolor);
			j.setForeground(Color.white);
		}
		
		else if(j.getClass()==MenuZone.class) {
			j.setBackground(altern);
			menuz.ini_buttons();
			for(Component i:j.getComponents()) {
				change_mode((Container) i);
			}
		}
		
		else {
			j.setBackground(bg);
			j.setForeground(fg);
			for(Component i:j.getComponents()) {
				change_mode((Container) i);
			}
		}
	}

	private String getRutaRecurso(String filename) throws URISyntaxException, IOException {
	    final ProtectionDomain domain;
	    final CodeSource source;
	    final URL url;
	    final URI uri;
	    String DirectoryPath;
	    String separador_directorios=System.getProperty("file.separator");
	    String JarURL;
	    File auxiliar;
	    domain = App.class.getProtectionDomain();
	    source = domain.getCodeSource();
	    url = source.getLocation();
	    uri = url.toURI();
	    JarURL = uri.getPath();
	    auxiliar = new File(JarURL);
	    if (auxiliar.isDirectory()) {
	        auxiliar = new File(auxiliar.getParentFile().getParentFile().getPath());
	        DirectoryPath = auxiliar.getCanonicalPath() + separador_directorios;
	    } else {
	        JarURL=auxiliar.getCanonicalPath();
	        DirectoryPath = JarURL.substring(0, JarURL.lastIndexOf(separador_directorios) + 1);

	    }

	    //System.out.println(DirectoryPath + filename);
	    return DirectoryPath + filename;
	}
	
	private String capitalizar(char s[]) {
		int r='a'-'A';
		for(int i=0;i<s.length;i++) {
			if(i==0) {
				if(s[i]>='a'&&s[i]<='z')s[i]-=r;
			}
			else if(s[i]>='A'&&s[i]<='Z')s[i]+=r;	
		}
		//System.out.println(s);
		return new String(s);
	}
	
	
	
	public static void main(String[] args) {
		new App();
	}
	
}
